function [M] = femeg_stiffness( p, t, D)
%FEMEG_STIFFNESS computes the stiffness matrix of the EEG-FP
%
%   M = FEMEG_STIFFNESS ( p, t, D) computes the stiffness matrix of the EEG
%   forward problem given the mesh with nodes p and elements t, and the 
%   electric conductivity tensor field D. This is done as described in:  
%
%   + Beltrachini, L., "A finite element solution of the EEG forward problem for 
%      multipolar sources", Submitted
%
%
%   Inputs:
%      p: nodes defining the tetrahedral mesh (size: Np x 3).
%      t: elements defining the tetrahedral mesh (size: Nt x No, with No:
%         number of nodes for a given basis function, i.e. No=4 for first 
%         order basis functions, and No=10 for second order basis functions).
%      D: Electrical conductivity tensor for each element (size: Nt x 6, in
%         the form [Dxx,Dxy,Dxz,Dyy,Dyz,Dzz]).
%
%
%   Outputs:
%      M: Stiffness matrix (size: Np x Np)
%
% The function femeg_som can be used for defining a second order mesh as a
% function of a first order mesh.
%
% See also FEMEG_SOM

%   This file is part of the FEMEG toolbox.
%   Author: Leandro Beltrachini <BeltrachiniL at cardiff.ac.uk>


%% Compute preliminaries

[b,c,d,V]=femeg_vol_coord(p,t(:,1:4)); % compute volume coorinates
np=size(p,1);
st=size(t,2);if st<=5,order=1;npe=4;else order=2;npe=10;end % get FEM order
if order==1,nel=4; elseif order==2,nel=10;end

%% General indices
row_id=repmat(t(:,1:nel),1,nel);
col_id=kron(t(:,1:nel),ones(1,nel));

%% Elemental media matrix

% Compute the Nex16 element vector F=kron(Lambda,Lambda)'*vec(D);
F=[ d(:,1).*(2.*D(:,3).*b(:,1) + 2.*D(:,5).*c(:,1)) + D(:,1).*b(:,1).^2 + D(:,4).*c(:,1).^2 + D(:,6).*d(:,1).^2 + 2.*D(:,2).*b(:,1).*c(:,1),...
    d(:,1).*(D(:,3).*b(:,2) + D(:,5).*c(:,2) + D(:,6).*d(:,2)) + D(:,1).*b(:,1).*b(:,2) + D(:,2).*b(:,1).*c(:,2) + D(:,2).*b(:,2).*c(:,1) + D(:,3).*b(:,1).*d(:,2) + D(:,4).*c(:,1).*c(:,2) + D(:,5).*c(:,1).*d(:,2),...
    d(:,1).*(D(:,3).*b(:,3) + D(:,5).*c(:,3) + D(:,6).*d(:,3)) + D(:,1).*b(:,1).*b(:,3) + D(:,2).*b(:,1).*c(:,3) + D(:,2).*b(:,3).*c(:,1) + D(:,3).*b(:,1).*d(:,3) + D(:,4).*c(:,1).*c(:,3) + D(:,5).*c(:,1).*d(:,3),...
    d(:,1).*(D(:,3).*b(:,4) + D(:,5).*c(:,4) + D(:,6).*d(:,4)) + D(:,1).*b(:,1).*b(:,4) + D(:,2).*b(:,1).*c(:,4) + D(:,2).*b(:,4).*c(:,1) + D(:,3).*b(:,1).*d(:,4) + D(:,4).*c(:,1).*c(:,4) + D(:,5).*c(:,1).*d(:,4),...
    d(:,1).*(D(:,3).*b(:,2) + D(:,5).*c(:,2) + D(:,6).*d(:,2)) + D(:,1).*b(:,1).*b(:,2) + D(:,2).*b(:,1).*c(:,2) + D(:,2).*b(:,2).*c(:,1) + D(:,3).*b(:,1).*d(:,2) + D(:,4).*c(:,1).*c(:,2) + D(:,5).*c(:,1).*d(:,2),...
    D(:,1).*b(:,2).^2 + 2.*D(:,2).*b(:,2).*c(:,2) + 2.*D(:,3).*b(:,2).*d(:,2) + D(:,4).*c(:,2).^2 + 2.*D(:,5).*c(:,2).*d(:,2) + D(:,6).*d(:,2).^2,...
    D(:,1).*b(:,2).*b(:,3) + D(:,2).*b(:,2).*c(:,3) + D(:,2).*b(:,3).*c(:,2) + D(:,3).*b(:,2).*d(:,3) + D(:,3).*b(:,3).*d(:,2) + D(:,4).*c(:,2).*c(:,3) + D(:,5).*c(:,2).*d(:,3) + D(:,5).*c(:,3).*d(:,2) + D(:,6).*d(:,2).*d(:,3),...
    D(:,1).*b(:,2).*b(:,4) + D(:,2).*b(:,2).*c(:,4) + D(:,2).*b(:,4).*c(:,2) + D(:,3).*b(:,2).*d(:,4) + D(:,3).*b(:,4).*d(:,2) + D(:,4).*c(:,2).*c(:,4) + D(:,5).*c(:,2).*d(:,4) + D(:,5).*c(:,4).*d(:,2) + D(:,6).*d(:,2).*d(:,4),...
    d(:,1).*(D(:,3).*b(:,3) + D(:,5).*c(:,3) + D(:,6).*d(:,3)) + D(:,1).*b(:,1).*b(:,3) + D(:,2).*b(:,1).*c(:,3) + D(:,2).*b(:,3).*c(:,1) + D(:,3).*b(:,1).*d(:,3) + D(:,4).*c(:,1).*c(:,3) + D(:,5).*c(:,1).*d(:,3),...
    D(:,1).*b(:,2).*b(:,3) + D(:,2).*b(:,2).*c(:,3) + D(:,2).*b(:,3).*c(:,2) + D(:,3).*b(:,2).*d(:,3) + D(:,3).*b(:,3).*d(:,2) + D(:,4).*c(:,2).*c(:,3) + D(:,5).*c(:,2).*d(:,3) + D(:,5).*c(:,3).*d(:,2) + D(:,6).*d(:,2).*d(:,3),...
    D(:,1).*b(:,3).^2 + 2.*D(:,2).*b(:,3).*c(:,3) + 2.*D(:,3).*b(:,3).*d(:,3) + D(:,4).*c(:,3).^2 + 2.*D(:,5).*c(:,3).*d(:,3) + D(:,6).*d(:,3).^2,...
    D(:,1).*b(:,3).*b(:,4) + D(:,2).*b(:,3).*c(:,4) + D(:,2).*b(:,4).*c(:,3) + D(:,3).*b(:,3).*d(:,4) + D(:,3).*b(:,4).*d(:,3) + D(:,4).*c(:,3).*c(:,4) + D(:,5).*c(:,3).*d(:,4) + D(:,5).*c(:,4).*d(:,3) + D(:,6).*d(:,3).*d(:,4),...
    d(:,1).*(D(:,3).*b(:,4) + D(:,5).*c(:,4) + D(:,6).*d(:,4)) + D(:,1).*b(:,1).*b(:,4) + D(:,2).*b(:,1).*c(:,4) + D(:,2).*b(:,4).*c(:,1) + D(:,3).*b(:,1).*d(:,4) + D(:,4).*c(:,1).*c(:,4) + D(:,5).*c(:,1).*d(:,4),...
    D(:,1).*b(:,2).*b(:,4) + D(:,2).*b(:,2).*c(:,4) + D(:,2).*b(:,4).*c(:,2) + D(:,3).*b(:,2).*d(:,4) + D(:,3).*b(:,4).*d(:,2) + D(:,4).*c(:,2).*c(:,4) + D(:,5).*c(:,2).*d(:,4) + D(:,5).*c(:,4).*d(:,2) + D(:,6).*d(:,2).*d(:,4),...
    D(:,1).*b(:,3).*b(:,4) + D(:,2).*b(:,3).*c(:,4) + D(:,2).*b(:,4).*c(:,3) + D(:,3).*b(:,3).*d(:,4) + D(:,3).*b(:,4).*d(:,3) + D(:,4).*c(:,3).*c(:,4) + D(:,5).*c(:,3).*d(:,4) + D(:,5).*c(:,4).*d(:,3) + D(:,6).*d(:,3).*d(:,4),...
    D(:,1).*b(:,4).^2 + 2.*D(:,2).*b(:,4).*c(:,4) + 2.*D(:,3).*b(:,4).*d(:,4) + D(:,4).*c(:,4).^2 + 2.*D(:,5).*c(:,4).*d(:,4) + D(:,6).*d(:,4).^2 ];

% Compute the corresponding Q matrix
if npe==4
    
    Q=eye(16)/6;
    
elseif npe==10
    
    ii=[1,2,3,4,1,2,1,3,1,4,2,3,2,4,3,4,5,6,7,8,5,6,5,7,5,8,6,7,6,8,7,8,9,10,11,12,9,10,9,11,9,12,10,11,10,12,11,12,13,14,15,...
        16,13,14,13,15,13,16,14,15,14,16,15,16,1,5,2,6,3,7,4,8,1,2,5,6,1,3,5,7,1,4,5,8,2,3,6,7,2,4,6,8,3,4,7,8,1,9,2,10,3,11,...
        4,12,1,2,9,10,1,3,9,11,1,4,9,12,2,3,10,11,2,4,10,12,3,4,11,12,1,13,2,14,3,15,4,16,1,2,13,14,1,3,13,15,1,4,13,16,2,3,14,...
        15,2,4,14,16,3,4,15,16,5,9,6,10,7,11,8,12,5,6,9,10,5,7,9,11,5,8,9,12,6,7,10,11,6,8,10,12,7,8,11,12,5,13,6,14,7,15,8,16,...
        5,6,13,14,5,7,13,15,5,8,13,16,6,7,14,15,6,8,14,16,7,8,15,16,9,13,10,14,11,15,12,16,9,10,13,14,9,11,13,15,9,12,13,16,10,11,...
        14,15,10,12,14,16,11,12,15,16];
    
    jj=[1,2,3,4,5,5,6,6,7,7,8,8,9,9,10,10,11,12,13,14,15,15,16,16,17,17,18,18,19,19,20,20,21,22,23,24,25,25,26,26,27,27,28,28,29,...
        29,30,30,31,32,33,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,45,45,46,46,46,46,47,47,47,47,48,...
        48,48,48,49,49,49,49,50,50,50,50,51,51,52,52,53,53,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,...
        60,60,60,61,61,62,62,63,63,64,64,65,65,65,65,66,66,66,66,67,67,67,67,68,68,68,68,69,69,69,69,70,70,70,70,71,71,72,72,73,...
        73,74,74,75,75,75,75,76,76,76,76,77,77,77,77,78,78,78,78,79,79,79,79,80,80,80,80,81,81,82,82,83,83,84,84,85,85,85,85,86,...
        86,86,86,87,87,87,87,88,88,88,88,89,89,89,89,90,90,90,90,91,91,92,92,93,93,94,94,95,95,95,95,96,96,96,96,97,97,97,97,98,...
        98,98,98,99,99,99,99,100,100,100,100];
    
    mm=[3,-1,-1,-1,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1,3,-1,3,-1,-1,-1,-1,3,-1,-1,-1,3,-1,-1,-1,3,-1,...
        -1,-1,-1,3,-1,-1,-1,3,-1,-1,-1,-1,3,-1,-1,-1,3,-1,3,-1,-1,3,3,-1,-1,-1,-1,-1,8,4,4,8,4,4,4,8,4,4,4,8,4,8,4,4,4,8,4,4,4,4,...
        4,4,-1,3,-1,-1,3,-1,-1,-1,4,4,4,8,8,4,4,8,4,4,4,8,8,4,4,4,4,4,4,4,4,8,4,4,-1,3,-1,-1,-1,-1,3,-1,4,4,4,8,4,4,4,8,8,4,4,8,4,...
        4,4,4,8,4,4,4,8,4,4,4,-1,-1,-1,3,3,-1,-1,-1,4,4,8,4,8,4,4,4,4,4,4,4,8,4,4,8,4,4,4,8,4,8,4,4,-1,-1,-1,3,-1,-1,3,-1,4,4,8,4,...
        4,4,4,4,8,4,4,4,4,4,4,8,8,4,4,8,8,4,4,4,-1,-1,-1,-1,-1,3,3,-1,4,4,4,4,4,4,8,4,8,4,4,4,4,4,8,4,8,4,4,4,8,4,4,8];
    
    Q=sparse(ii,jj,mm,16,100)/30;
end

Me=F*Q;
Me=Me./repmat(V,1,size(Me,2))/6;

%% Build ensambled matrix
M=accumarray([row_id(:,1),col_id(:,1)],Me(:,1),[np,np],[],[],true);
for k=2:nel^2
    M=M+accumarray([row_id(:,k),col_id(:,k)],Me(:,k),[np,np],[],[],true);
end

